import rclpy                                     # ROS2 Python接口库
from rclpy.duration import Duration
from rclpy.node import Node                      # ROS2 节点类
from visualization_msgs.msg import Marker        #标记库，画视线
from geometry_msgs.msg import Point
import time

class ViewMarkerPublisherNode(Node):

    def __init__(self, name):
        super().__init__(name)                                    # ROS2节点父类初始化
        self.pub = self.create_publisher(Marker, "kitti_view_marker", 10)   # 创建发布者对象（消息类型、话题名、队列长度）
        self.publish_veiw_marker(self.pub)

    def publish_veiw_marker(self, pub):
        marker = Marker()
        marker.header.frame_id = 'map'
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.id = 0  #each marker have only one id.
        marker.action = Marker.ADD  #to tell marker the operation is add a new marker
        marker.lifetime = Duration().to_msg() #marker's life time.how long it appears in the frame.            marker.type = Marker.LINE_STRIP # marker's type.Today we use line_strip.        
        marker.type = Marker.LINE_STRIP
        
        marker.color.r = 1.0
        marker.color.g = 0.0
        marker.color.b = 0.0            
        marker.color.a = 1.0 #apparent degree,transparency
        
        marker.scale.x = 0.2 #scale of line
        # marker.scale.y = 0.01
        # marker.scale.z = 0.01
        
        marker.points = []
        marker.points.append(Point())  # 右前方四十五度点，视野90度
        marker.points[-1].x = float(10)
        marker.points[-1].y = float(-10)
        marker.points[-1].z = float(0)

        marker.points.append(Point())  # (0,0,0)is the location of velodyne LiDAR
        marker.points[-1].x = float(0)
        marker.points[-1].y = float(0)
        marker.points[-1].z = float(0)

        marker.points.append(Point())   # 根据激光雷达坐标，做前方45度
        marker.points[-1].x = float(10)  
        marker.points[-1].y = float(10)
        marker.points[-1].z = float(0)
        
        while rclpy.ok():
            pub.publish(marker)
            self.get_logger().info('view marker published')
            time.sleep(0.1)



def main(args=None):                                 # ROS2节点主入口main函数
    rclpy.init(args=args)                            # ROS2 Python接口初始化
    node = ViewMarkerPublisherNode("view_marker_publisher_node")     # 创建ROS2节点对象并进行初始化
    rclpy.spin(node)                                 # 循环等待ROS2退出
    node.destroy_node()                              # 销毁节点对象
    rclpy.shutdown()                                 # 关闭ROS2 Python接口
